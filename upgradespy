#!/usr/bin/env bash
#Copyright (C) 2015  Helal Uddin <helal00 at gmail.com>
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

_srcsbinpath=$(dirname $(readlink -f $0))

_miscpath=""
function addmiscpath(){
	local _var _com _comloc
	_com=$1
	_var="_${1}"
	_comloc=$2
	if [ -z "$_comloc" ] || [ ! -x "$_comloc" ]; then 
		_comloc=$(command -v "$_com")
	fi
	if [ -z "$_comloc" ] ; then
		echo "	ERROR: linux-misc/$_com command not found in your system. Please install it from https://github.com/helal00/linux-misc before continue. If the command is already installed, plese specify it in $_miscpath with adding a line as '$_var=/path/to/$_com'. Create the file if doesn't exist already."
		return 1
	else		
		if ! grep -Fq "$_var=" "$_miscpath" ; then
			sed -i -e '$a\' "$_miscpath"
			echo "$_var=$_comloc" >> "$_miscpath"
		fi
		echo "$_comloc"
	fi
	return 0
}

if [ ! -z "$_srcsbinpath" ]; then
	_miscpath="$_srcsbinpath/linux-misc"
	if [ -s "$_miscpath" ] ; then
		. "$_miscpath"
	fi
	
	if ! _calloutput=$(addmiscpath "getgitrepo" "$_getgitrepo") ; then
		echo "$_calloutput" 1>&2
		exit 1
	else
		_getgitrepo="$_calloutput"
	fi

	if ! _calloutput=$(addmiscpath "githublatest" "$_githublatest") ; then
		echo "$_calloutput" 1>&2
		exit 1
	else
		_githublatest="$_calloutput"
	fi
	
	if ! _calloutput=$(addmiscpath "sflatest" "$_sflatest") ; then
		echo "$_calloutput" 1>&2
		exit 1
	else
		_sflatest="$_calloutput"
	fi
	
	if ! _calloutput=$(addmiscpath "timeout3" "$_timeout3") ; then
		echo "$_calloutput" 1>&2
		exit 1
	else
		_timeout3="$_calloutput"
	fi
fi

function strtoarry(){
	local _str _retarray _deli _c _l;_str=$1 _retarray=$2 _deli=$3
	_c=-1;while read -r _l; do _c=$((_c+1));eval $_retarray[$_c]='$_l';done <<< "$(echo $_str | sed -e "s/$_deli/\n/g")"
}

echo "Querying installed.db file......."
if [ ! -f "$_srcsbinpath/installed.db" ] ; then
	echo "No installed.db present is the dir $_srcsbinpath" 1>&2
else
	readarray _upgradeline < "$_srcsbinpath/installed.db"
	for _upln in "${_upgradeline[@]}"
	do
		if [ "${_upln:0:1}" = "#" ] ; then
			continue
		fi

		strtoarry "$_upln" "_pparts" '*\*\*'

		if [ ${#_pparts[@]} -ne 2 ] ; then
			continue
		fi
		
		_url=${_pparts[0]#*://}

		strtoarry "$_url" "_urlparts" '\/'
		if [ ${#_urlparts[@]} -lt 3 ] ; then
			continue
		fi

		echo "Package: ${_urlparts[2]}:"
		echo "============================================================="
		echo "Currently Installed:"
		echo "$(eval ${_pparts[1]} 2>&1)"
		echo "Latest Version and URL: "
		if echo "${_urlparts[0]}" | grep -q "sourceforge.net" ; then
			"$_sflatest" "both" "${_pparts[0]}"
		elif echo "${_urlparts[0]}" | grep -q "github.com" ; then
			"$_githublatest" "both" "${_pparts[0]}"
		fi
		echo "============================================================="
	done
fi

echo "Querying apt-get ......."
if "$_timeout3" -t 15 sudo echo ; then
	echo "into apt-get ......."
	_aptloc=$(command -v apt-get)
	if [ ! -z "$_aptloc" ] ; then
		echo "Available system updrages by apt-get:"
		echo "============================================================="
		sudo "$_aptloc" update 1>/dev/null
		sudo "$_aptloc" upgrade -s
	fi
fi



